name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: windows
            ext: .exe
          - os: macos-latest
            platform: macos
            ext: ''

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pillow

    - name: Install Playwright browsers
      shell: bash
      run: |
        playwright install chromium
        playwright install-deps

    - name: Create executable with PyInstaller
      shell: bash
      run: |
        # 统一的PyInstaller配置，包含所有依赖
        pyinstaller --name="douyou_assistant" \
                   --windowed \
                   --onefile \
                   --icon=icon.ico \
                   --add-data="src${{ matrix.os == 'windows-latest' && ';src' || ':src' }}" \
                   --add-data="config${{ matrix.os == 'windows-latest' && ';config' || ':config' }}" \
                   --hidden-import=PySide6.QtCore \
                   --hidden-import=PySide6.QtWidgets \
                   --hidden-import=PySide6.QtGui \
                   --hidden-import=PySide6.QtNetwork \
                   --hidden-import=PySide6.QtPrintSupport \
                   --hidden-import=PySide6.QtWebEngineCore \
                   --hidden-import=PySide6.QtWebEngineWidgets \
                   --hidden-import=PySide6.QtWebEngine \
                   --hidden-import=PySide6.QtOpenGL \
                   --hidden-import=playwright \
                   --hidden-import=playwright.sync_api \
                   --hidden-import=playwright.async_api \
                   --hidden-import=playwright._impl \
                   --hidden-import=playwright._api \
                   --hidden-import=src.worker \
                   --hidden-import=src.account_manager \
                   --hidden-import=src.downloader \
                   --hidden-import=src.uploader \
                   --hidden-import=src.api_endpoints \
                   --hidden-import=src.xbogus \
                   --hidden-import=src.main \
                   --hidden-import=src.gui \
                   --hidden-import=src.main_window \
                   --hidden-import=requests \
                   --hidden-import=rich \
                   --hidden-import=rich.console \
                   --hidden-import=rich.panel \
                   --hidden-import=browser_cookie3 \
                   --hidden-import=json \
                   --hidden-import=pathlib \
                   --hidden-import=os \
                   --hidden-import=sys \
                   --hidden-import=time \
                   --hidden-import=threading \
                   --hidden-import=queue \
                   --hidden-import=urllib \
                   --hidden-import=urllib.parse \
                   --hidden-import=base64 \
                   --hidden-import=hashlib \
                   --hidden-import=re \
                   --hidden-import=typing \
                   --hidden-import=argparse \
                   --collect-all playwright \
                   --collect-all PySide6 \
                   --collect-all rich \
                   ${{ matrix.os == 'macos-latest' && '--noupx' || '' }} \
                   gui_main.py

    - name: Create version info
      run: |
        echo "Version: ${{ github.event.inputs.version || github.ref_name }}" > version.txt
        echo "Build Date: $(date)" >> version.txt
        echo "Platform: ${{ matrix.platform }}" >> version.txt

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: douyou_assistant-${{ matrix.platform }}
        path: |
          dist/douyou_assistant${{ matrix.ext }}
          version.txt
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -la ./artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/douyou_assistant-windows/douyou_assistant.exe
          ./artifacts/douyou_assistant-macos/douyou_assistant
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
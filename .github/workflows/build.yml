name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: windows
            ext: .exe
          - os: macos-latest
            platform: macos
            ext: ''

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # 使用更稳定的版本

    - name: Install uv
      shell: bash
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      shell: bash
      run: |
        pip install -r requirements.txt
        pip install "pyinstaller>=6.6,<7" pillow
        # tkinter是Python内置库，无需额外安装

    - name: Install Playwright browsers
      shell: bash
      run: |
        pip install playwright
        playwright install chromium
        playwright install-deps

    - name: Clean build environment
      shell: bash
      run: |
        rm -rf dist build __pycache__ *.spec
        python -m pip uninstall -y PySide6-Essentials 2>/dev/null || true

    - name: Verify dependencies
      shell: bash
      run: |
        echo "Checking Python and dependencies..."
        python --version
        python -c "import sys; print('Python path:', sys.path)"
        python -c "import tkinter; print('Tkinter available (built-in)')" || echo "Tkinter import failed"
        python -c "import customtkinter; print('CustomTkinter imported successfully')" || echo "CustomTkinter import failed"
        python -c "import src.worker_ctk; print('Worker CTK module imported successfully')" || echo "Worker CTK import failed"
        python -c "import src.account_manager; print('Account manager imported successfully')" || echo "Account manager import failed"
        python -c "import PyInstaller; print('PyInstaller version:', PyInstaller.__version__)" || echo "PyInstaller import failed"

    - name: Create executable (optimized build)
      shell: bash
      run: |
        # Set data path separator based on OS
        if [ "$RUNNER_OS" == "Windows" ]; then
          DATA_SEP=";"
        else
          DATA_SEP=":"
        fi

        # 使用简化的PyInstaller命令，包含Playwright runtime hook
         pyinstaller gui_main_ctk.py \
           --name douyou_assistant \
           --windowed \
           --onedir \
           --clean \
           --noconfirm \
           --add-data "src:src" \
           --add-data "config:config" \
           --add-data "icon.ico:." \
           --runtime-hook "runtime_hook_playwright.py" \
           --hidden-import "src.worker_ctk" \
           --hidden-import "src.main_window_ctk" \
           --hidden-import "src.account_manager" \
           --hidden-import "src.downloader" \
           --hidden-import "src.uploader" \
           --hidden-import "src.api_endpoints" \
           --hidden-import "src.xbogus" \
           --hidden-import "customtkinter" \
           --hidden-import "requests" \
           --hidden-import "rich" \
           --hidden-import "browser_cookie3" \
           --hidden-import "playwright" \
           --exclude-module "matplotlib" \
           --exclude-module "numpy" \
           --exclude-module "scipy" \
           --exclude-module "pandas" \
           --exclude-module "PySide6" \
           --exclude-module "src.worker" \
           --exclude-module "src.main_window" \
           --exclude-module "src.gui" \
           --icon "icon.ico"

    - name: Verify build output
      shell: bash
      run: |
        # 检查构建输出
        echo "Contents of dist directory:"
        ls -la dist/ || true
        
        # 在macOS上检查.app包或可执行文件
        if [ "$RUNNER_OS" == "Darwin" ]; then
          if [ -d "dist/douyou_assistant.app" ]; then
            echo "Build successful! Found .app bundle"
            ls -la dist/douyou_assistant.app/
          elif [ -f "dist/douyou_assistant/douyou_assistant" ]; then
            echo "Build successful! Found executable"
            ls -la dist/douyou_assistant/
          else
            echo "Error: Build failed - no executable or .app bundle found!"
            exit 1
          fi
        else
          # Windows检查
          if [ ! -f "dist/douyou_assistant/douyou_assistant${{ matrix.ext }}" ]; then
            echo "Error: Build failed - executable not found!"
            echo "Contents of dist/douyou_assistant directory:"
            ls -la dist/douyou_assistant/ || true
            exit 1
          fi
          echo "Build successful! Files in dist/douyou_assistant/:"
          ls -la dist/douyou_assistant/
        fi

    - name: Copy executable to root of dist for easier access
      shell: bash
      run: |
        # onedir模式下，检查可执行文件是否存在并复制
        if [ "$RUNNER_OS" == "Windows" ]; then
          if [ -f "dist/douyou_assistant/douyou_assistant.exe" ]; then
            cp "dist/douyou_assistant/douyou_assistant.exe" "dist/"
          else
            echo "Warning: Windows executable not found in expected location"
          fi
        else
          # 在macOS上，--windowed模式会生成.app包
          if [ -d "dist/douyou_assistant.app" ]; then
            echo "Found .app bundle at dist/douyou_assistant.app"
            echo "No need to copy - .app bundle is already in the correct location"
          elif [ -f "dist/douyou_assistant/douyou_assistant" ]; then
            echo "Found executable, copying to root of dist"
            cp "dist/douyou_assistant/douyou_assistant" "dist/"
          else
            echo "Warning: macOS executable not found in expected location"
            echo "Contents of dist directory:"
            ls -la dist/ || true
            echo "Contents of dist/douyou_assistant directory:"
            ls -la dist/douyou_assistant/ || true
          fi
        fi
        
        # 显示dist目录结构用于调试
        echo "Final dist structure:"
        ls -la dist/ || true

    - name: Create version info
      run: |
        echo "Version: ${{ github.event.inputs.version || github.ref_name }}" > version.txt
        echo "Build Date: $(date)" >> version.txt
        echo "Platform: ${{ matrix.platform }}" >> version.txt
        echo "Python Version: 3.11" >> version.txt

    - name: Test executable (basic)
      shell: bash
      run: |
        # Basic test to ensure executable exists and has correct permissions
        if [ "$RUNNER_OS" == "Windows" ]; then
          # Windows executable
          echo "Testing Windows executable..."
          if [ -f "dist/douyou_assistant/douyou_assistant.exe" ]; then
            echo "✓ Windows executable found and accessible"
            file dist/douyou_assistant/douyou_assistant.exe || echo "File command not available"
          else
            echo "✗ Windows executable not found"
            exit 1
          fi
        else
          # macOS executable  
          echo "Testing macOS executable..."
          if [ -f "dist/douyou_assistant/douyou_assistant" ]; then
            chmod +x dist/douyou_assistant/douyou_assistant
            echo "✓ macOS executable found and made executable"
            file dist/douyou_assistant/douyou_assistant || echo "File command not available"
          else
            echo "✗ macOS executable not found"
            exit 1
          fi
        fi

    - name: Code sign macOS app (ad-hoc)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # 对macOS应用进行ad-hoc代码签名以避免"已损坏"错误
        echo "Signing macOS application..."
        if [ -d "dist/douyou_assistant.app" ]; then
          # 签名.app包
          codesign --force --deep --sign - "dist/douyou_assistant.app"
          echo "✓ .app bundle signed successfully"
          # 验证签名
          codesign --verify --verbose "dist/douyou_assistant.app" || echo "Warning: Signature verification failed"
        elif [ -f "dist/douyou_assistant/douyou_assistant" ]; then
          # 签名可执行文件
          codesign --force --sign - "dist/douyou_assistant/douyou_assistant"
          echo "✓ Executable signed successfully"
          # 验证签名
          codesign --verify --verbose "dist/douyou_assistant/douyou_assistant" || echo "Warning: Signature verification failed"
        else
          echo "Warning: No macOS application found to sign"
        fi

    - name: Create distribution archive (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # 使用PowerShell创建Windows压缩包
        Compress-Archive -Path "dist/douyou_assistant" -DestinationPath "douyou_assistant-${{ matrix.platform }}.zip" -Force
        
    - name: Create distribution archive (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # 创建macOS压缩包
        cd dist
        tar -czf "../douyou_assistant-${{ matrix.platform }}.tar.gz" douyou_assistant.app
        cd ..

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: douyou_assistant-${{ matrix.platform }}
        path: |
          douyou_assistant-${{ matrix.platform }}.*
          version.txt
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: |
        echo "Artifacts structure:"
        find ./artifacts -type f -name "*" | head -20

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/douyou_assistant-windows/douyou_assistant-windows.zip
          ./artifacts/douyou_assistant-macos/douyou_assistant-macos.tar.gz
        generate_release_notes: true
        body: |
          ## 抖音全能助手 - 自动构建版本

          ### 安装说明
          
          **Windows用户：**
          1. 下载 `douyou_assistant-windows.zip`
          2. 解压到任意目录
          3. 运行 `douyou_assistant.exe`
          
          **macOS用户：**
          1. 下载 `douyou_assistant-macos.tar.gz`
          2. 解压到任意目录
          3. 运行 `douyou_assistant`
          
          ### 功能特性
          - 支持多账号管理
          - 支持视频下载（主页作品、点赞作品、收藏作品等）
          - 支持视频上传
          - 现代化GUI界面
          
          ### 技术说明
          - Python 3.11
          - 使用 PyInstaller 打包
          - 包含所有必要的依赖库
          
          如遇到问题，请查看项目的 README 文档或提交 Issue。
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
